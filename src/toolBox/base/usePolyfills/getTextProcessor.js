/**
 * 文本处理工具
 * 
 * 提供函数式风格的文本处理管道，支持链式操作和错误处理
 * 设计为轻量级、无依赖且高性能
 */

/**
 * 错误类型枚举
 */
const 错误类型 = {
    无效输入: '无效输入',
    处理失败: '处理失败',
    未知错误: '未知错误'
};

/**
 * 创建文本处理上下文
 * @param {string} 初始文本 - 初始文本内容
 * @returns {Object} 文本处理上下文对象
 */
export const 创建文本上下文 = (初始文本 = '') => ({
    文本: 初始文本 === null || 初始文本 === undefined ? '' : String(初始文本),
    错误: null
});

/**
 * 安全执行处理函数的高阶函数
 * @param {string} 处理器名称 - 处理器名称（用于错误消息）
 * @returns {Function} 包装后的高阶函数
 */
export const 安全执行 = (处理器名称) => (处理函数) => (上下文) => {
    // 如果已有错误，短路返回
    if (上下文?.错误) return 上下文;
    
    try {
        return 处理函数(上下文);
    } catch (错误) {
        return {
            ...上下文,
            错误: {
                类型: 错误类型.处理失败,
                消息: `${处理器名称}处理失败: ${错误.message}`,
                原始错误: 错误
            }
        };
    }
};

/**
 * 文本处理器集合
 */
export const 文本处理器 = {
    /**
     * 转换为大写
     */
    转大写: 安全执行('转大写')((上下文) => ({
        ...上下文,
        文本: 上下文.文本.toUpperCase()
    })),
    
    /**
     * 转换为小写
     */
    转小写: 安全执行('转小写')((上下文) => ({
        ...上下文,
        文本: 上下文.文本.toLowerCase()
    })),
    
    /**
     * 分割文本
     * @param {string|RegExp} 分隔符 - 分隔符
     */
    分割: (分隔符) => 安全执行('分割')((上下文) => ({
        ...上下文,
        文本: Array.isArray(上下文.文本) 
            ? 上下文.文本 
            : 上下文.文本.split(分隔符)
    })),

    /**
     * 连接文本数组
     * @param {string} 连接符 - 连接符
     */
    连接: (连接符 = '') => 安全执行('连接')((上下文) => ({
        ...上下文,
        文本: Array.isArray(上下文.文本) 
            ? 上下文.文本.join(连接符)
            : 上下文.文本
    })),
    
    /**
     * 去除首尾空白
     */
    去除首尾空白: 安全执行('去除首尾空白')((上下文) => ({
        ...上下文,
        文本: typeof 上下文.文本 === 'string' 
            ? 上下文.文本.trim()
            : 上下文.文本
    })),
    
    /**
     * 替换文本
     * @param {string|RegExp} 匹配项 - 要替换的内容
     * @param {string} 替换项 - 替换为的内容
     */
    替换: (匹配项, 替换项) => 安全执行('替换')((上下文) => ({
        ...上下文,
        文本: typeof 上下文.文本 === 'string'
            ? 上下文.文本.replace(匹配项, 替换项)
            : 上下文.文本
    })),
    
    /**
     * 全局替换文本
     * @param {string} 匹配项 - 要替换的内容
     * @param {string} 替换项 - 替换为的内容
     */
    全局替换: (匹配项, 替换项) => 安全执行('全局替换')((上下文) => ({
        ...上下文,
        文本: typeof 上下文.文本 === 'string'
            ? 上下文.文本.replace(new RegExp(匹配项, 'g'), 替换项)
            : 上下文.文本
    })),
    
    /**
     * 提取子字符串
     * @param {number} 开始位置
     * @param {number} 结束位置
     */
    提取子串: (开始位置, 结束位置) => 安全执行('提取子串')((上下文) => ({
        ...上下文,
        文本: typeof 上下文.文本 === 'string'
            ? 上下文.文本.substring(开始位置, 结束位置)
            : 上下文.文本
    })),
    
    /**
     * 按行分割
     */
    按行分割: 安全执行('按行分割')((上下文) => ({
        ...上下文,
        文本: typeof 上下文.文本 === 'string'
            ? 上下文.文本.split(/\r?\n/)
            : 上下文.文本
    })),
    
    /**
     * 拼接字符串
     * @param {string} 附加文本 - 要拼接的文本
     * @param {string} 位置 - 'before'|'after'，拼接在原文本前面还是后面
     */
    拼接: (附加文本, 位置 = 'after') => 安全执行('拼接')((上下文) => ({
        ...上下文,
        文本: typeof 上下文.文本 === 'string'
            ? 位置 === 'before' 
                ? 附加文本 + 上下文.文本 
                : 上下文.文本 + 附加文本
            : 上下文.文本
    }))
};

/**
 * 结果处理器
 */
export const 结果处理器 = {
    /**
     * 获取处理结果文本
     */
    获取文本: 安全执行('获取文本')((上下文) => 上下文.文本),
    
    /**
     * 格式化处理结果
     * @param {Function} 转换函数 - 自定义转换函数
     */
    格式化: (转换函数) => 安全执行('格式化')((上下文) => ({
        ...上下文,
        文本: 转换函数(上下文.文本)
    })),
    
    /**
     * 检查是否发生错误
     */
    是否有错误: 安全执行('检查错误')((上下文) => !!上下文.错误),
    
    /**
     * 获取错误信息
     */
    获取错误: 安全执行('获取错误')((上下文) => 上下文.错误)
};

/**
 * 管道函数 - 用于组合多个处理器
 * @param {...Function} 处理器组 - 多个处理器函数
 * @returns {Function} 组合后的处理器函数
 */
export const 管道 = (...处理器组) => (初始值) => {
    // 如果初始值不是有效上下文，创建一个
    const 上下文 = 初始值?.文本 !== undefined
        ? 初始值
        : 创建文本上下文(初始值);

    return 处理器组.reduce((累积上下文, 处理器) => {
        if (累积上下文.错误) return 累积上下文;
        try {
            return 处理器(累积上下文);
        } catch (错误) {
            return {
                ...累积上下文,
                错误: {
                    类型: 错误类型.未知错误,
                    消息: '管道执行错误',
                    原始错误: 错误
                }
            };
        }
    }, 上下文);
};

/**
 * 创建文本工具实例
 * @param {string} 初始文本 - 初始文本内容
 * @returns {Object} 文本工具对象
 */
export const 创建文本工具 = (初始文本 = '') => {
    // 返回所有处理器函数的包装器
    return {
        转大写: () => 文本处理器.转大写,
        转小写: () => 文本处理器.转小写,
        分割: (分隔符) => 文本处理器.分割(分隔符),
        连接: (连接符) => 文本处理器.连接(连接符),
        去除首尾空白: () => 文本处理器.去除首尾空白,
        替换: (匹配项, 替换项) => 文本处理器.替换(匹配项, 替换项),
        全局替换: (匹配项, 替换项) => 文本处理器.全局替换(匹配项, 替换项),
        提取子串: (开始位置, 结束位置) => 文本处理器.提取子串(开始位置, 结束位置),
        按行分割: () => 文本处理器.按行分割,
        拼接: (附加文本, 位置) => 文本处理器.拼接(附加文本, 位置),
        格式化: (转换函数) => 结果处理器.格式化(转换函数),
        获取文本: () => 结果处理器.获取文本,
        是否有错误: () => 结果处理器.是否有错误,
        获取错误: () => 结果处理器.获取错误,
        管道,
        创建上下文: () => 创建文本上下文(初始文本)
    };
};

export default {
    创建文本工具,
    创建文本上下文,
    文本处理器,
    结果处理器,
    管道,
    安全执行
}; 