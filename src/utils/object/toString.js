// 格式化数组的函数
const 格式化数组 = (数组, 层级 = 0, 缩进 = '  ', 深度格式化 = false) => {
    if (深度格式化) {
        const 缩进空格 = 缩进.repeat(层级 + 1);
        return `[\n${缩进空格}${数组.map(项 => 格式化值(项, 层级 + 1, 缩进, 深度格式化)).join(`,\n${缩进空格}`)}\n${缩进.repeat(层级)}]`;
    }
    return 数组.join(', ');
};

// 格式化对象的函数
const 格式化对象 = (对象, 层级 = 0, 缩进 = '  ', 深度格式化 = false) => {
    if (深度格式化) {
        const 缩进空格 = 缩进.repeat(层级 + 1);
        return `{\n${缩进空格}${Object.entries(对象)
            .map(([k, v]) => `${k}: ${格式化值(v, 层级 + 1, 缩进, 深度格式化)}`)
            .join(`,\n${缩进空格}`)}\n${缩进.repeat(层级)}}`;
    }
    return JSON.stringify(对象);
};

// 格式化值的函数
const 格式化值 = (值, 层级 = 0, 缩进 = '  ', 深度格式化 = false) => {
    if (Array.isArray(值)) {
        return 格式化数组(值, 层级, 缩进, 深度格式化);
    }
    if (typeof 值 === 'object' && 值 !== null) {
        return 格式化对象(值, 层级, 缩进, 深度格式化);
    }
    return String(值);
};

// 处理单个键值对的函数
const 处理键值对 = (键, 值, 选项) => {
    const {
        键处理器,
        值处理器,
        键值对处理器,
        键值分隔符,
        项目后缀,
        缩进,
        深度格式化
    } = 选项;

    const 处理后的键 = 键处理器(键);
    const 处理后的值 = 值处理器(值);
    const 格式化后的值 = 格式化值(处理后的值, 0, 缩进, 深度格式化);
    
    const 基本键值对 = `${处理后的键}${键值分隔符}${格式化后的值}${项目后缀}`;
    
    return 键值对处理器(基本键值对, { 
        原始键: 键, 
        原始值: 值, 
        处理后的键, 
        处理后的值 
    });
};

// 主函数
const 将对象转换为字符串 = ({
    键值分隔符 = ': ',
    项目分隔符 = '\n',
    项目后缀 = ';',
    键处理器 = (键) => 键,
    值处理器 = (值) => 值,
    键值对处理器 = (键值对) => 键值对,
    后处理器 = (结果) => 结果,
    忽略空值 = false,
    深度格式化 = false,
    缩进 = '  '
} = {}) => {
    const 选项 = {
        键处理器,
        值处理器,
        键值对处理器,
        键值分隔符,
        项目后缀,
        缩进,
        深度格式化
    };

    return (对象 = {}) => {
        return 后处理器(
            Object.entries(对象)
                .filter(([_, 值]) => !忽略空值 || (值 !== null && 值 !== undefined))
                .map(([键, 值]) => 处理键值对(键, 值, 选项))
                .join(项目分隔符)
        );
    };
};

// 使用柯里化版本重新实现对象转键值对字符串
 const 对象转键值对字符串 = 将对象转换为字符串({
    键值分隔符: ': ',
    项目分隔符: '\n',
    项目后缀: ';'
});
export {
    对象转键值对字符串,
    将对象转换为字符串
}