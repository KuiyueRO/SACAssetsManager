/**
 * @AI 核心工具库极限测试
 * 测试目标：
 * 1. 对象池极限
 * 2. 链式调用极限
 * 3. 并发处理极限
 * 4. 错误处理极限
 * 5. 内存泄漏测试
 * 6. 链式调用功能测试
 * 7. 管道调用功能测试
 * 8. 事件系统测试
 */

import { 创建串链器 } from '../src/工具箱/forCore/串链器.js';

// 创建不同的上下文处理器
const 数学 = 创建串链器();
const 文本 = 创建串链器();

// 定义数学方法 - 确保所有需要的方法都被定义
数学
  .加((x, y) => x + y)
  .减((x, y) => x - y)
  .乘((x, y) => x * y)
  .除((x, y) => x / y)
  .平方(x => x * x);

// 定义文本方法
文本
  .连接((text1, text2) => `${text1}${text2}`)
  .重复((text, times) => text.repeat(times))
  .分割(text => text.split(''));

// 定义转换
数学._(文本, '文本', (数值) => `数值是: ${数值}`);
文本._(数学, '数值', (文本) => {
  const 匹配 = 文本.match(/\d+/);
  return 匹配 ? parseFloat(匹配[0]) : 0;
});

// 基础测试
console.log('基础运算测试:');
console.log(数学(5).加(3).值);  // 应该输出 8
console.log(数学(10).乘(2).值); // 应该输出 20

// 链式测试
const 测试1 = 数学(5)
  .加(3)      // 8
  .平方()     // 64
  ._文本_();  // "数值是: 64"

const 测试2 = 文本('数值是: 10')
  ._数值_()   // 10
  .乘(2)      // 20
  ._文本_()   // "数值是: 20"
  .重复(2);   // "数值是: 20数值是: 20"

console.log('测试1:', 测试1.值);
console.log('测试2:', 测试2.值);

// 测试对象处理 - 使用纯函数式方式
const 图片处理 = 创建串链器();

// 定义纯函数式的图片处理方法
图片处理
  .创建((_, 宽度 = 100, 高度 = 100) => ({ 宽度, 高度 }))
  .获取宽度(图片 => 图片.宽度)
  .获取高度(图片 => 图片.高度)
  .缩放((图片, 比例) => ({
    宽度: 图片.宽度 * 比例,
    高度: 图片.高度 * 比例
  }));

const 测试图片 = 图片处理()
  .创建(200, 150)
  .缩放(0.5);

console.log('图片尺寸:', {
  宽度: 测试图片.获取宽度(),
  高度: 测试图片.获取高度()
}); // 应输出 { 宽度: 100, 高度: 75 }

// 测试更复杂的图片处理链
const 复杂图片处理 = 测试图片
  .缩放(2)    // 放大到原始尺寸
  .缩放(0.5); // 再次缩小

console.log('复杂处理后的图片尺寸:', {
  宽度: 复杂图片处理.获取宽度(),
  高度: 复杂图片处理.获取高度()
}); // 应输出 { 宽度: 100, 高度: 75 } 