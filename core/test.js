// 串链器测试用例.js
import { 创建串链器, 创建扩展定义 } from '../src/工具箱/forCore/串链器.js';
// 创建一个基础串链器实例
const 链 = 创建串链器();

// 1. 基础数学计算链
链
  .加((值, 数) => 值 + 数)
  .乘((值, 数) => 值 * 数)
  .平方(值 => 值 * 值)
  .开方(值 => Math.sqrt(值));

console.log('数学计算链:');
console.log(
  链(2)
    .加(3)
    .乘(2)
    .平方()
    .开方()
    .值
); // 输出: 5

// 2. 文本处理链
链
  .分词(文本 => 文本.split(/\s+/))
  .过滤空白(数组 => 数组.filter(项 => 项.trim()))
  .首字母大写(数组 => 数组.map(词 => 词.charAt(0).toUpperCase() + 词.slice(1)))
  .连接((数组, 分隔符 = ' ') => 数组.join(分隔符));

console.log('文本处理链:');
console.log(
  链('hello   world  javascript')
    .分词()
    .过滤空白()
    .首字母大写()
    .连接('-')
    .值
); // 输出: "Hello-World-Javascript"

// 3. 条件处理链
链
  .数值检查(值 => ({
    是正数: 值 > 0,
    是负数: 值 < 0,
    是零: 值 === 0
  }))
  .描述数值(检查结果 => {
    if (检查结果.是正数) return '正数';
    if (检查结果.是负数) return '负数';
    return '零';
  });

console.log('条件分支示例:');
[-5, 0, 8].forEach(数 => {
  console.log(
    链(数)
      .分支({
        负数: 值 => `${值} 是负数`,
        零: 值 => `${值} 是零`,
        默认: 值 => `${值} 是正数`
      })
      .值
  );
});

// 4. 复杂对象处理链
链
  .命名空间('对象处理')
    .提取字段((对象, 字段) => 对象[字段])
    .合并对象((对象1, 对象2) => ({ ...对象1, ...对象2 }))
    .转换字段((对象, 转换规则) => {
      const 结果 = { ...对象 };
      Object.entries(转换规则).forEach(([字段, 转换函数]) => {
        if (字段 in 结果) {
          结果[字段] = 转换函数(结果[字段]);
        }
      });
      return 结果;
    });

const 用户数据 = {
  姓名: 'zhang san',
  年龄: '25',
  爱好: ['读书', '游戏']
};

console.log('对象处理链:');
console.log(
  链(用户数据)
    .使用命名空间('对象处理')
    .转换字段({
      姓名: 名字 => 名字.split(' ').map(词 => 词.charAt(0).toUpperCase() + 词.slice(1)).join(' '),
      年龄: 年龄 => parseInt(年龄),
      爱好: 爱好 => 爱好.join('、')
    })
    .合并对象({ 更新时间: new Date().toISOString() })
    .值
);

// 创建基础串链器实例
const 数字链 = 创建串链器();

// 定义延迟执行相关的态射
数字链
  .命名空间('延迟')
    .延迟((值, 毫秒数 = 1000) => new Promise(resolve => 
      setTimeout(() => resolve(值), 毫秒数)
    ))
    
    .打印值((值) => {
      console.log('当前值:', 值);
      return 值;
    })
    
    .加((值, 数字) => 值 + 数字)
    
    .乘((值, 数字) => 值 * 数字)
  .退出命名空间();

// 使用示例
const 执行延迟计算 = async () => {
  const 结果 = await 数字链(1)
    .使用命名空间('延迟')
      .打印值()           // 输出: 当前值: 1
      .加(2)             // 值变为 3
      .延迟(1000)        // 等待1秒
      .打印值()          // 输出: 当前值: 3
      .乘(4)             // 值变为 12
      .延迟(500)         // 等待0.5秒
      .打印值()          // 输出: 当前值: 12
    .退出命名空间()
    .值;
    
  console.log('最终结果:', 结果);  // 输出: 最终结果: 12
};

执行延迟计算();