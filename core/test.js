// 问题诊断测试.js
import { 创建串链器 } from '../src/工具箱/forCore/串链器.js';

// 工具函数
const 输出测试结果 = (测试名称, 实际结果, 预期结果) => {
  const 是否通过 = JSON.stringify(实际结果) === JSON.stringify(预期结果);
  console.log(`测试: ${测试名称} ${是否通过 ? '✅ 通过' : '❌ 失败'}`);
  if (!是否通过) {
    console.log(`  预期: ${JSON.stringify(预期结果)}`);
    console.log(`  实际: ${JSON.stringify(实际结果)}`);
  }
  return 是否通过;
};

// 精确复现串链器分支处理问题
const 精确复现测试 = () => {
  console.log("\n### 精确复现分支处理问题 ###");
  const 串链 = 创建串链器();
  
  // 问题1: 函数条件转换测试
  const 函数条件测试 = () => {
    console.log("\n>> 函数条件转换测试 <<");
    
    const 大于10 = 值 => 值 > 10;
    const 条件对象 = {
      [大于10]: 值 => 值 + " 大于10",
      "默认": 值 => 值 + " 默认值"
    };
    
    console.log("条件对象键:", Object.keys(条件对象));
    console.log("键的类型:", typeof Object.keys(条件对象)[0]);
    console.log("函数直接表示:", 大于10.toString());
    
    // 测试函数条件在Object.entries中的行为
    for (const [条件, 处理] of Object.entries(条件对象)) {
      console.log(`条件: "${条件}", 类型: ${typeof 条件}`);
      if (typeof 条件 === 'function') {
        console.log("  函数条件会被执行");
      } else if (条件.includes('=>')) {
        console.log("  这是函数字符串表示");
      }
    }
    
    // 测试分支处理结果
    const 结果 = 串链(15).分支(条件对象).值;
    return 输出测试结果("函数条件测试", 结果, "15 大于10");
  };
  
  // 问题2: 嵌套串链器测试
  const 嵌套串链器测试 = () => {
    console.log("\n>> 嵌套串链器测试 <<");
    
    const 嵌套结果 = 串链(30)
      .分支({
        [值 => 值 > 20]: 值 => 
          串链(值)
            .分支({
              [值 => 值 > 25]: () => 'A',
              [值 => 值 <= 25]: () => 'B',
            }),
        [值 => 值 <= 20]: () => 'C',
        '默认': () => 'D'
      })
      .值;
    
    // 检查嵌套结果对象
    const 嵌套对象 = 串链(30)
      .分支({
        [值 => 值 > 20]: 值 => 
          串链(值)
            .分支({
              [值 => 值 > 25]: () => 'A',
              [值 => 值 <= 25]: () => 'B',
            })
      });
    
    console.log("嵌套对象类型:", typeof 嵌套对象);
    console.log("是否有值属性:", '值' in 嵌套对象);
    
    return 输出测试结果("嵌套串链器测试", 嵌套结果, "A");
  };
  
  // 问题3: null值处理测试
  const 空值处理测试 = () => {
    console.log("\n>> null值处理测试 <<");
    
    console.log("null的typeof结果:", typeof null);
    
    const 结果 = 串链(null)
      .分支({
        'number': () => '数字类型',
        'string': () => '字符串类型',
        'boolean': () => '布尔类型',
        'object': () => '对象类型',
        '空值': () => '空值类型',
        '默认': () => '其他类型'
      })
      .值;
    
    return 输出测试结果("null值处理测试", 结果, "空值类型");
  };
  
  // 问题4: 复杂条件函数测试
  const 复杂条件函数测试 = () => {
    console.log("\n>> 复杂条件函数测试 <<");
    
    const 是偶数 = 值 => 值 % 2 === 0;
    const 是3的倍数 = 值 => 值 % 3 === 0;
    
    const 条件对象 = {
      [值 => 是偶数(值) && 是3的倍数(值)]: 值 => `${值} 是偶数且是3的倍数`,
      [值 => 是偶数(值) && !是3的倍数(值)]: 值 => `${值} 是偶数但不是3的倍数`,
      [值 => !是偶数(值) && 是3的倍数(值)]: 值 => `${值} 不是偶数但是3的倍数`,
      '默认': 值 => `${值} 既不是偶数也不是3的倍数`
    };
    
    console.log("复杂条件键:", Object.keys(条件对象));
    
    const 结果1 = 串链(12).分支(条件对象).值;
    const 结果2 = 串链(8).分支(条件对象).值;
    
    return 输出测试结果("复杂条件12", 结果1, "12 是偶数且是3的倍数") && 
           输出测试结果("复杂条件8", 结果2, "8 是偶数但不是3的倍数");
  };
  
  // 运行所有子测试
  const 测试结果 = [
    函数条件测试(),
    嵌套串链器测试(),
    空值处理测试(),
    复杂条件函数测试()
  ];
  
  const 通过数 = 测试结果.filter(Boolean).length;
  console.log(`\n精确复现测试: ${通过数}/${测试结果.length} 通过`);
  
  return 测试结果.every(Boolean);
};

// 运行测试
精确复现测试();
