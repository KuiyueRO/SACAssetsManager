/**
 * 模块加载器 - 核心模块
 * 
 * 作为系统的引导程序，负责：
 * - 加载所有核心模块
 * - 管理模块生命周期
 * - 协调模块之间的依赖关系
 * - 提供模块注册和查询机制
 * - 解构并转换宿主API为模块层API
 * 
 * 模块的定义:
 * 模块将随宿主环境启动和关闭
 * 模块并不是网络模块,而是内部基础特性供应者
 * 所有模块配合向扩展提供以下特性
 * - 扩展加载和生命周期管理
 * - 扩展所需的UI扩展点
 * - 提供给扩展使用的工具包(toolBox)
 * - 窗口内不同扩展通信
 * - electron环境下的node接口暴露和nodeModules支持
 * - 浏览器环境(包含electron)环境下的跨窗口通信
 * - 日志和代码编译
 * - 配置存储
 * 
 * 加载机制要求:
 * - 部分模块渐进增强,例如加载日志模块后,日志由日志模块提供,否则由console提供
 * - 事件模块加载后,事件由事件模块提供,否则宿主API提供
 * - 配置模块加载后,配置保存才能生效
 * - 需要注意模块加载顺序,例如事件模块必须在日志模块之前加载,否则日志模块无法正常工作
 * - 扩展加载器模块最后加载,此时所有模块已经加载完成,扩展加载器可以进行扩展的加载
 * - 扩展也可以注册用户态服务,例如用户态的配置服务,用户态的事件服务,用户态的日志服务等
 * - 扩展注册的服务只能使用两种方式:
 *    1.worker线程
 *    2.electron环境下使用独立窗口
 * - 扩展注册的服务与扩展之间的具体通信由扩展自行处理,模块加载器不负责通信,只负责提供环境和启动以及基础的通信机制 
 * - 扩展的特点:
 *    除非注册服务,否则扩展全部是****无状态的****(UI状态不在此列),尽可能设计为命令集合 
 * 
 * 核心模块**不是**扩展,而是内部模块
 * 
 * @AI 文件名使用英文,内部函数等使用中文,注意语义化,除非极其必要禁止使用类,请仔细判断目前的模块列表是否完备
 */


// 导入拆分后的模块
import { 核心模块列表, 模块路径映射 } from './constants.js';
import { 
  注册模块, 获取模块, 获取所有模块名称, 清理注册表 
} from './moduleRegistry.js';
import { 
  加载模块, 设置宿主API, 获取宿主API, 注册模块路径
} from './moduleLoader.js';

let 已初始化 = false;

/**
 * 初始化模块加载器
 * @param {Object} 提供的宿主API - 插件主体提供的API对象
 */
export async function 初始化(提供的宿主API) {
  if (已初始化) {
    console.warn("模块加载器已经初始化，忽略重复调用");
    return;
  }
  
  设置宿主API(提供的宿主API);
  console.info("模块加载器初始化中...");
  
  // 注册模块加载器自身作为一个模块
  注册模块("模块加载器", {
    获取模块,
    注册模块,
    获取所有模块名称,
    获取宿主API,
    注册模块路径,
    获取模块路径映射: () => ({ ...模块路径映射 }) // 返回路径映射的副本以避免直接修改
  });
  
  已初始化 = true;
  console.info("模块加载器初始化完成");
}

/**
 * 启动所有模块
 */
export async function 启动() {
  if (!已初始化) {
    throw new Error("模块加载器尚未初始化");
  }
  
  console.info("开始加载核心模块...");
  
  try {
    // 按顺序加载所有核心模块
    for (const 模块名称 of 核心模块列表) {
      await 加载模块(模块名称);
    }
    
    console.info("所有核心模块加载完成");
  } catch (错误) {
    console.error("模块加载失败:", 错误);
    throw 错误;
  }
}

/**
 * 销毁所有模块
 */
export async function 销毁() {
  if (!已初始化) return;
  
  console.info("开始清理模块...");
  
  清理注册表();
  设置宿主API(null);
  已初始化 = false;
  
  console.info("模块清理完成");
}

// 导出公共API
export { 注册模块, 获取模块, 注册模块路径 };


