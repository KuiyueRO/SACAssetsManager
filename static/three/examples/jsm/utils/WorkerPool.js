/* esm.sh - esbuild bundle(three@0.169.0/examples/jsm/utils/WorkerPool) es2022 production */
var o=class{constructor(s=4){this.pool=s,this.queue=[],this.workers=[],this.workersResolve=[],this.workerStatus=0}_initWorker(s){if(!this.workers[s]){let e=this.workerCreator();e.addEventListener("message",this._onMessage.bind(this,s)),this.workers[s]=e}}_getIdleWorker(){for(let s=0;s<this.pool;s++)if(!(this.workerStatus&1<<s))return s;return-1}_onMessage(s,e){let r=this.workersResolve[s];if(r&&r(e),this.queue.length){let{resolve:t,msg:i,transfer:h}=this.queue.shift();this.workersResolve[s]=t,this.workers[s].postMessage(i,h)}else this.workerStatus^=1<<s}setWorkerCreator(s){this.workerCreator=s}setWorkerLimit(s){this.pool=s}postMessage(s,e){return new Promise(r=>{let t=this._getIdleWorker();t!==-1?(this._initWorker(t),this.workerStatus|=1<<t,this.workersResolve[t]=r,this.workers[t].postMessage(s,e)):this.queue.push({resolve:r,msg:s,transfer:e})})}dispose(){this.workers.forEach(s=>s.terminate()),this.workersResolve.length=0,this.workers.length=0,this.queue.length=0,this.workerStatus=0}};export{o as WorkerPool};
//# sourceMappingURL=WorkerPool.js.map