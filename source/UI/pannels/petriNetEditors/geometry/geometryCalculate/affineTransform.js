import * as 向量 from './vector.js'
// 1. 通用变换空间配置生成器
export const 创建变换空间 = (缩放系数) => ({
    缩放: {
        系数: 1 / 缩放系数,
        矩阵: 向量.值(2, 1 / 缩放系数)
    }
})

// 2. 通用空间映射计算器
export const 计算空间映射 = (事件, 参考点) => ({
    当前: [事件.clientX, 事件.clientY],
    参考: [参考点.x, 参考点.y]
})

// 3. 通用仿射变换处理器
export const 计算仿射变换 = (映射, 变换空间) => {
    return 向量.逐元积(
        向量.减(映射.当前, 映射.参考),
        变换空间.缩放.矩阵
    )
}

// 4. 几何约束处理器
export const 应用几何约束 = (状态向量, 约束配置) => {
    const 约束结果 = 向量.下钳制(状态向量, 约束配置.下限)
    return {
        结果: 约束结果,
        满足性: 向量.逐元比较(约束结果, 状态向量)
    }
}

// 5. 专门处理拖拽变换
export const 处理拖拽变换 = ({事件, 状态, 配置}) => {
    const 变换空间 = 创建变换空间(配置.缩放系数)
    const 空间映射 = 计算空间映射(事件, 状态.参考点)
    const 变换向量 = 计算仿射变换(空间映射, 变换空间)

    return {
        新位置: 向量.加(状态.当前位置, 变换向量),
        位移增量: 变换向量
    }
}

// 6. 处理缩放时的约束
export const 处理尺寸约束 = (变换后状态, 约束配置, 方向) => {
    const 约束结果 = 应用几何约束(变换后状态.尺寸, 约束配置)
    const 位置更新掩码 = [
        方向.includes('w') && 约束结果.满足性[0],
        方向.includes('n') && 约束结果.满足性[1]
    ]

    return {
        新尺寸: 约束结果.结果,
        新位置: 向量.逐元选择(位置更新掩码, 变换后状态.位置, 状态.当前位置)
    }
}

// 7. 专门处理缩放变换
export const 处理缩放变换 = ({事件, 状态, 配置, 约束}) => {
    const 变换空间 = 创建变换空间(配置.缩放系数)
    const 空间映射 = 计算空间映射(事件, 状态.参考点)
    const 变换向量 = 计算仿射变换(空间映射, 变换空间)

    const 线性变换结果 = {
        尺寸: 计算线性变换(配置.变换矩阵.尺寸, 变换向量),
        位置: 计算线性变换(配置.变换矩阵.位置, 变换向量)
    }

    const 变换后状态 = {
        尺寸: 向量.加(状态.初始尺寸, 线性变换结果.尺寸),
        位置: 向量.加(状态.初始位置, 线性变换结果.位置)
    }

    return 约束?.尺寸 
        ? 处理尺寸约束(变换后状态, 约束.尺寸, 配置.方向)
        : 变换后状态
}

