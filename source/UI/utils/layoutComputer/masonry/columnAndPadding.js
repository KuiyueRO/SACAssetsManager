/**
 * 根据容器宽度、计划列宽、表格视图阈值和可选的列间距计算网格布局的列数、左右边距和列间距
 * 
 * @param {number} 容器宽度 - 容器的总宽度
 * @param {number} 计划列宽 - 理想的单列宽度
 * @param {number} 表格视图阈值 - 切换到表格视图的宽度阈值
 * @param {number} [传入列间距] - 可选的列间距值,如果未提供或无效,将使用默认计算
 * @returns {{columnCount: number, paddingLR: number, gutter: number}} 返回包含列数、左右边距和列间距的对象
 *   - columnCount: 计算得出的列数
 *   - paddingLR: 左右边距值
 *   - gutter: 列间距值,大于等于零,并且小于计划列宽的一半
 */
export function 根据宽度和尺寸计算列数和边距(容器宽度, 计划列宽, 表格视图阈值, 传入列间距) {
    let 列数 = Math.max(Math.floor(容器宽度 / 计划列宽) - 1, 1);
    let 列间距;

    // 验证传入的列间距
    if (typeof 传入列间距 === 'number' && 传入列间距 >= 0 && 传入列间距 <= 计划列宽 / 2) {
        列间距 = 传入列间距;
    } else {
        列间距 = 计划列宽 / 6;  // 默认列间距为计划列宽的1/6
    }

    let 左右边距 = (容器宽度 - (列间距 * (列数 - 1) + 计划列宽 * 列数)) / 2;
    
    if (左右边距 < 0) {
        列数 = 列数 - 1;
        左右边距 = (容器宽度 - (列间距 * (列数 - 1) + 计划列宽 * 列数)) / 2;
    }

    if (计划列宽 < 表格视图阈值) {
        左右边距 = 10;
        列数 = 1;
        列间距 = 0;  // 单列时没有列间距
    }

    return { columnCount: 列数, paddingLR: 左右边距, gutter: 列间距 };
}