import { 创建流程图, 添加节点, 添加动作, 添加连接, 触发变迁 } from './PetriNet.js';
export { 创建流程图, 添加节点, 添加动作, 添加连接, 触发变迁 }
// 模拟AI API调用
/*const 调用AI = async (消息) => {
    await new Promise(resolve => setTimeout(resolve, 1000)); // 模拟网络延迟
    return `AI响应: ${消息}`;
};

export async function 运行AI聊天流程() {
    const 流程图 = 创建流程图();
    
    // 添加状态节点
    添加节点(流程图, '待处理消息', 2);  // 初始有2条消息待处理
    添加节点(流程图, 'AI处理中', 0);
    添加节点(流程图, '响应队列', 0);
    添加节点(流程图, '已完成', 0);
    
    // 添加动作节点
    添加动作(流程图, '开始处理', async () => {
        console.log('检查是否可以开始新的处理...');
        return 流程图.节点.get('AI处理中').数值 < 2; // 最多同时处理2条消息
    });
    
    添加动作(流程图, 'AI响应', async () => {
        const 结果 = await 调用AI('测试消息');
        console.log(结果);
        return true;
    });
    
    添加动作(流程图, '完成处理');
    
    // 添加连接
    添加连接(流程图, '待处理消息', '开始处理');
    添加连接(流程图, '开始处理', 'AI处理中');
    添加连接(流程图, 'AI处理中', 'AI响应');
    添加连接(流程图, 'AI响应', '响应队列');
    添加连接(流程图, '响应队列', '完成处理');
    添加连接(流程图, '完成处理', '已完成');
    
    // 并发处理消息
    console.log('开始处理消息...');
    await Promise.all([
        触发变迁(流程图, '开始处理'),
        触发变迁(流程图, '开始处理')
    ]);
    
    // 处理AI响应
    await Promise.all([
        触发变迁(流程图, 'AI响应'),
        触发变迁(流程图, 'AI响应')
    ]);
    
    // 完成处理
    await Promise.all([
        触发变迁(流程图, '完成处理'),
        触发变迁(流程图, '完成处理')
    ]);
    
    console.log('最终状态:', {
        待处理: 流程图.节点.get('待处理消息').数值,
        处理中: 流程图.节点.get('AI处理中').数值,
        已完成: 流程图.节点.get('已完成').数值
    });
}

运行AI聊天流程();*/