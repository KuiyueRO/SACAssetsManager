export const 锐化 = [
    [0, -1, 0],
    [-1, 5, -1],
    [0, -1, 0]
];

export const 高斯模糊 = [
    [1/16, 2/16, 1/16],
    [2/16, 4/16, 2/16],
    [1/16, 2/16, 1/16]
];

export const 浮雕 = [
    [-2, -1, 0],
    [-1, 1, 1],
    [0, 1, 2]
];

export const 边缘检测 = [
    [-1, -1, -1],
    [-1, 8, -1],
    [-1, -1, -1]
];

export const 细节增强 = [
    [0, -0.5, 0],
    [-0.5, 3, -0.5],
    [0, -0.5, 0]
];

export const 平滑 = [
    [1/9, 1/9, 1/9],
    [1/9, 1/9, 1/9],
    [1/9, 1/9, 1/9]
];

export const 水平边缘 = [
    [-1, -1, -1],
    [0, 0, 0],
    [1, 1, 1]
];

export const 垂直边缘 = [
    [-1, 0, 1],
    [-1, 0, 1],
    [-1, 0, 1]
];

// Sobel 算子 (水平方向)
export const sobelX = [
    [-1, 0, 1],
    [-2, 0, 2], 
    [-1, 0, 1]
];

// Sobel 算子 (垂直方向)
export const sobelY = [
    [-1, -2, -1],
    [0, 0, 0],
    [1, 2, 1]
];

// Laplacian 边缘检测
export const laplacian = [
    [0, 1, 0],
    [1, -4, 1],
    [0, 1, 0]
];

// 基础锐化卷积核
export const sharpen = [
    [0, -1, 0],
    [-1, 5, -1],
    [0, -1, 0]
];

// 高斯模糊 3x3
export const gaussianBlur = [
    [1/16, 2/16, 1/16],
    [2/16, 4/16, 2/16],
    [1/16, 2/16, 1/16]
];

// 均值模糊
export const boxBlur = [
    [1/9, 1/9, 1/9],
    [1/9, 1/9, 1/9],
    [1/9, 1/9, 1/9]
];

// 浮雕效果
export const emboss = [
    [-2, -1, 0],
    [-1, 1, 1],
    [0, 1, 2]
];

// Prewitt 算子 (水平)
export const prewittX = [
    [-1, 0, 1],
    [-1, 0, 1],
    [-1, 0, 1]
];

// Prewitt 算子 (垂直)
export const prewittY = [
    [-1, -1, -1],
    [0, 0, 0],
    [1, 1, 1]
];

// Roberts 交叉算子
export const robertsX = [
    [1, 0],
    [0, -1]
];
export const robertsY = [
    [0, 1],
    [-1, 0]
];

// Scharr 算子 (对角线边缘检测效果更好)
export const scharrX = [
    [3, 0, -3],
    [10, 0, -10],
    [3, 0, -3]
];

// 5x5 高斯模糊
export const gaussianBlur5x5 = [
    [1/256, 4/256, 6/256, 4/256, 1/256],
    [4/256, 16/256, 24/256, 16/256, 4/256],
    [6/256, 24/256, 36/256, 24/256, 6/256],
    [4/256, 16/256, 24/256, 16/256, 4/256],
    [1/256, 4/256, 6/256, 4/256, 1/256]
];

// 修正运动模糊 (5x9)
export const motionBlur = [
    [1/9, 0, 0, 0, 0, 0, 0, 0, 1/9],
    [0, 1/9, 0, 0, 0, 0, 0, 1/9, 0],
    [0, 0, 1/9, 0, 0, 0, 1/9, 0, 0],
    [0, 0, 0, 1/9, 0, 1/9, 0, 0, 0],
    [0, 0, 0, 0, 1/9, 0, 0, 0, 0],
    [0, 0, 0, 1/9, 0, 1/9, 0, 0, 0],
    [0, 0, 1/9, 0, 0, 0, 1/9, 0, 0],
    [0, 1/9, 0, 0, 0, 0, 0, 1/9, 0],
    [1/9, 0, 0, 0, 0, 0, 0, 0, 1/9]
]; // 修正为9x9对称矩阵

// 浮雕效果 (另一种变体)
export const emboss2 = [
    [-1, -1, -1, -1, 0],
    [-1, -1, -1, 0, 1],
    [-1, -1, 0, 1, 1],
    [-1, 0, 1, 1, 1],
    [0, 1, 1, 1, 1]
];

// 铅笔素描效果
export const pencilSketch = [
    [-1, -1, -1],
    [-1, 9, -1],
    [-1, -1, -1]
];

// 油画效果
export const oilPainting = [
    [1/25, 1/25, 1/25, 1/25, 1/25],
    [1/25, 1/25, 1/25, 1/25, 1/25],
    [1/25, 1/25, 1/25, 1/25, 1/25],
    [1/25, 1/25, 1/25, 1/25, 1/25],
    [1/25, 1/25, 1/25, 1/25, 1/25]
];

// 45度角边缘检测
export const edge45 = [
    [-2, -1, 0],
    [-1, 0, 1],
    [0, 1, 2]
];

// 135度角边缘检测
export const edge135 = [
    [0, 1, 2],
    [-1, 0, 1],
    [-2, -1, 0]
];

// 八方向边缘检测
export const edgeCompass = [
    [-1, -1, -1],
    [1, -2, 1],
    [1, 1, 1]
];

// 细节增强(强化版)
export const enhancedDetail = [
    [-1, -1, -1],
    [-1, 12, -1],
    [-1, -1, -1]
];

// 高频增强
export const highFrequency = [
    [-1, -1, -1],
    [-1, 8.9, -1],
    [-1, -1, -1]
];

// 水彩画效果
export const watercolor = [
    [0.1, 0.1, 0.1, 0.1, 0.1],
    [0.1, 0.2, 0.2, 0.2, 0.1],
    [0.1, 0.2, 0.0, 0.2, 0.1],
    [0.1, 0.2, 0.2, 0.2, 0.1],
    [0.1, 0.1, 0.1, 0.1, 0.1]
];

// 马赛克效果
export const mosaic = [
    [1/4, 1/4],
    [1/4, 1/4]
];

// 梦幻效果
export const dream = [
    [1/25, 1/25, 1/25, 1/25, 1/25],
    [1/25, 2/25, 2/25, 2/25, 1/25],
    [1/25, 2/25, 3/25, 2/25, 1/25],
    [1/25, 2/25, 2/25, 2/25, 1/25],
    [1/25, 1/25, 1/25, 1/25, 1/25]
];

// 椒盐噪声消除
export const denoiseSaltPepper = [
    [1, 1, 1],
    [1, 2, 1],
    [1, 1, 1]
];

// 纹理检测
export const textureDetect = [
    [1, 2, 1],
    [0, 0, 0],
    [-1, -2, -1]
];

// 纹理增强
export const textureEnhance = [
    [-1, -1, -1],
    [-1, 9.5, -1],
    [-1, -1, -1]
];

// 纹理平滑
const textureSmooth = [
    [1/10, 1/10, 1/10],
    [1/10, 2/10, 1/10],
    [1/10, 1/10, 1/10]
];

// 方向性边缘检测 (0度)
const edge0 = [
    [-1, -1, -1],
    [2, 2, 2],
    [-1, -1, -1]
];

// 细节提取
const detailExtract = [
    [0, -1, 0],
    [-1, 10, -1],
    [0, -1, 0]
];

// 7x7 大尺寸高斯模糊 (更平滑的过渡效果)
export const gaussianBlur7x7 = [
    [1/1024, 2/1024, 3/1024, 4/1024, 3/1024, 2/1024, 1/1024],
    [2/1024, 4/1024, 6/1024, 8/1024, 6/1024, 4/1024, 2/1024],
    [3/1024, 6/1024, 12/1024, 16/1024, 12/1024, 6/1024, 3/1024],
    [4/1024, 8/1024, 16/1024, 24/1024, 16/1024, 8/1024, 4/1024],
    [3/1024, 6/1024, 12/1024, 16/1024, 12/1024, 6/1024, 3/1024],
    [2/1024, 4/1024, 6/1024, 8/1024, 6/1024, 4/1024, 2/1024],
    [1/1024, 2/1024, 3/1024, 4/1024, 3/1024, 2/1024, 1/1024]
];

// 双边模糊近似 (保持边缘的模糊效果)
export const bilateralLike = [
    [0.1, 0.15, 0.1],
    [0.15, 0.2, 0.15],
    [0.1, 0.15, 0.1]
];

// 色调分离效果
export const toneSeparation = [
    [-1, -1, -1],
    [-1, 16, -1],
    [-1, -1, -1]
];

// 非线性锐化
export const nonLinearSharpen = [
    [0, -0.5, 0],
    [-0.5, 3, -0.5],
    [0, -0.5, 0]
];

// 修正高质量模糊效果 (11x11) - 重新计算归一化系数
export const qualityBlur11x11 = [
    [1, 2, 3, 4, 5, 5, 5, 4, 3, 2, 1],
    [2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2],
    [3, 4, 5, 6, 7, 7, 7, 6, 5, 4, 3],
    [4, 5, 6, 7, 8, 8, 8, 7, 6, 5, 4],
    [5, 6, 7, 8, 9, 9, 9, 8, 7, 6, 5],
    [5, 6, 7, 8, 9, 9, 9, 8, 7, 6, 5],
    [5, 6, 7, 8, 9, 9, 9, 8, 7, 6, 5],
    [4, 5, 6, 7, 8, 8, 8, 7, 6, 5, 4],
    [3, 4, 5, 6, 7, 7, 7, 6, 5, 4, 3],
    [2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2],
    [1, 2, 3, 4, 5, 5, 5, 4, 3, 2, 1]
].map(row => row.map(x => x / 821)); // 修正归一化系数

// 方向性运动模糊 (9x9) - 45度角
export const directionalMotionBlur = [
    [0, 0, 0, 0, 0, 0.2, 0.3, 0.4, 0.5],
    [0, 0, 0, 0, 0.2, 0.3, 0.4, 0.5, 0.4],
    [0, 0, 0, 0.2, 0.3, 0.4, 0.5, 0.4, 0.3],
    [0, 0, 0.2, 0.3, 0.4, 0.5, 0.4, 0.3, 0.2],
    [0, 0.2, 0.3, 0.4, 1.0, 0.4, 0.3, 0.2, 0],
    [0.2, 0.3, 0.4, 0.5, 0.4, 0.3, 0.2, 0, 0],
    [0.3, 0.4, 0.5, 0.4, 0.3, 0.2, 0, 0, 0],
    [0.4, 0.5, 0.4, 0.3, 0.2, 0, 0, 0, 0],
    [0.5, 0.4, 0.3, 0.2, 0, 0, 0, 0, 0]
].map(row => row.map(x => x / 11.8)); // 归一化处理

// 高级细节增强 (7x7)
export const advancedDetail = [
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 2, 2, 2, -1, -1],
    [-1, -1, 2, 16, 2, -1, -1],
    [-1, -1, 2, 2, 2, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1]
];

// 高级柔焦效果 (9x9)
export const softFocus = [
    [1, 2, 3, 4, 5, 4, 3, 2, 1],
    [2, 3, 4, 5, 6, 5, 4, 3, 2],
    [3, 4, 5, 6, 7, 6, 5, 4, 3],
    [4, 5, 6, 7, 8, 7, 6, 5, 4],
    [5, 6, 7, 8, 9, 8, 7, 6, 5],
    [4, 5, 6, 7, 8, 7, 6, 5, 4],
    [3, 4, 5, 6, 7, 6, 5, 4, 3],
    [2, 3, 4, 5, 6, 5, 4, 3, 2],
    [1, 2, 3, 4, 5, 4, 3, 2, 1]
].map(row => row.map(x => x / 581)); // 归一化处理

// 高级纹理增强 (7x7)
export const textureEnhancement = [
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, 2, 2, 2, 2, 2, -1],
    [-1, 2, 3, 3, 3, 2, -1],
    [-1, 2, 3, 20, 3, 2, -1],
    [-1, 2, 3, 3, 3, 2, -1],
    [-1, 2, 2, 2, 2, 2, -1],
    [-1, -1, -1, -1, -1, -1, -1]
];

// 高级HDR效果 (13x13)
export const hdrEnhancement = [
    [-1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -2, -2, -3, -2, -2, -1, -1, -1, -1],
    [-1, -1, 0, -2, -2, -3, -3, -3, -2, -2, 0, -1, -1],
    [-1, -1, -2, -2, -3, -3, -4, -3, -3, -2, -2, -1, -1],
    [-1, -2, -2, -3, 0, 2, 3, 2, 0, -3, -2, -2, -1],
    [-1, -2, -3, -3, 2, 8, 11, 8, 2, -3, -3, -2, -1],
    [-2, -3, -3, -4, 3, 11, 17, 11, 3, -4, -3, -3, -2],
    [-1, -2, -3, -3, 2, 8, 11, 8, 2, -3, -3, -2, -1],
    [-1, -2, -2, -3, 0, 2, 3, 2, 0, -3, -2, -2, -1],
    [-1, -1, -2, -2, -3, -3, -4, -3, -3, -2, -2, -1, -1],
    [-1, -1, 0, -2, -2, -3, -3, -3, -2, -2, 0, -1, -1],
    [-1, -1, -1, -1, -2, -2, -3, -2, -2, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1]
];

// 高级景深模拟 (15x15)
export const depthOfField = [
    [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1],
    [1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 3, 3, 2, 2, 1],
    [2, 2, 3, 3, 4, 4, 5, 5, 5, 4, 4, 3, 3, 2, 2],
    [2, 3, 3, 4, 4, 5, 5, 6, 5, 5, 4, 4, 3, 3, 2],
    [3, 3, 4, 4, 5, 5, 6, 6, 6, 5, 5, 4, 4, 3, 3],
    [3, 4, 4, 5, 5, 6, 6, 7, 6, 6, 5, 5, 4, 4, 3],
    [3, 4, 5, 5, 6, 6, 7, 7, 7, 6, 6, 5, 5, 4, 3],
    [3, 4, 5, 6, 6, 7, 7, 8, 7, 7, 6, 6, 5, 4, 3],
    [3, 4, 5, 5, 6, 6, 7, 7, 7, 6, 6, 5, 5, 4, 3],
    [3, 4, 4, 5, 5, 6, 6, 7, 6, 6, 5, 5, 4, 4, 3],
    [3, 3, 4, 4, 5, 5, 6, 6, 6, 5, 5, 4, 4, 3, 3],
    [2, 3, 3, 4, 4, 5, 5, 6, 5, 5, 4, 4, 3, 3, 2],
    [2, 2, 3, 3, 4, 4, 5, 5, 5, 4, 4, 3, 3, 2, 2],
    [1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 3, 3, 2, 2, 1],
    [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1]
].map(row => row.map(x => x / 1089)); // 归一化处理

// 高级绘画效果 (11x11)
export const paintingEffect = [
    [0, 0, 0.1, 0.1, 0.2, 0.2, 0.2, 0.1, 0.1, 0, 0],
    [0, 0.1, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.2, 0.1, 0],
    [0.1, 0.2, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.3, 0.2, 0.1],
    [0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3, 0.1],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3, 0.1],
    [0.1, 0.2, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.3, 0.2, 0.1],
    [0, 0.1, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.2, 0.1, 0],
    [0, 0, 0.1, 0.1, 0.2, 0.2, 0.2, 0.1, 0.1, 0, 0]
];

// 高级梦幻效果 (13x13)
export const dreamEffect = [
    [0.1, 0.1, 0.2, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1],
    [0.1, 0.2, 0.2, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.3, 0.2, 0.2, 0.1],
    [0.2, 0.2, 0.3, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3, 0.2, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.6, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.7, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.7, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.6, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.2, 0.2, 0.3, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3, 0.2, 0.2],
    [0.1, 0.2, 0.2, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.3, 0.2, 0.2, 0.1],
    [0.1, 0.1, 0.2, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1]
].map(row => row.map(x => x / 32.5)); // 归一化处理

// 高级纹理分析 (17x17)
export const textureAnalysis = Array(23).fill().map((_, i) => {
    if (i < 2 || i > 20) return Array(23).fill(-1);
    if (i === 2 || i === 20) return Array(23).fill().map((_, j) => (j < 2 || j > 20) ? -1 : 0);
    
    const row = [];
    for (let j = 0; j < 23; j++) {
        if (j < 2 || j > 20) row.push(-1);
        else {
            const value = Math.min(Math.min(i - 2, 20 - i), Math.min(j - 2, 20 - j));
            row.push(Math.max(0, value));
        }
    }
    return row;
});

// 高级水彩画效果 (15x15)
export const watercolorPro = [
    [0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1],
    [0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.2, 0.2, 0.2, 0.1, 0.1],
    [0.1, 0.2, 0.3, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.3, 0.3, 0.2, 0.1, 0.1],
    [0.2, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2, 0.1],
    [0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.5, 0.6, 0.6, 0.6, 0.6, 0.5, 0.5, 0.4, 0.3, 0.2, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.7, 0.7, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.7, 0.7, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.5, 0.6, 0.6, 0.6, 0.6, 0.5, 0.5, 0.4, 0.3, 0.2, 0.2],
    [0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2],
    [0.2, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2, 0.1],
    [0.1, 0.2, 0.3, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.3, 0.3, 0.2, 0.1, 0.1],
    [0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.2, 0.2, 0.2, 0.1, 0.1],
    [0.1, 0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1],
    [0.1, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]
].map(row => row.map(x => x / 45.5)); // 归一化处理

// 高级浮雕效果 (19x19)
export const embossPro = [
    [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
    [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1],
    [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, 0],
    [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, 0, 0, 1],
    [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, 0, 0, 1, 1, 2],
    [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2],
    [-2, -2, -2, -2, -2, -2, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2, 2, 2],
    [-2, -2, -2, -2, -2, -2, -2, -1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2],
    [-2, -2, -2, -2, -2, -2, -1, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [-2, -2, -2, -2, -2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [-2, -2, -2, -2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [-2, -2, -2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [-2, -2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [-2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [-1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
];

// 高级光照效果 (21x21)
export const lightingEffect = [
    [0.1, 0.1, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.4, 0.4, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1],
    [0.1, 0.1, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1],
    [0.1, 0.2, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.6, 0.7, 0.6, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2, 0.1],
    [0.1, 0.2, 0.3, 0.4, 0.5, 0.5, 0.6, 0.6, 0.7, 0.7, 0.8, 0.7, 0.7, 0.6, 0.6, 0.5, 0.5, 0.4, 0.3, 0.2, 0.1],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.7, 0.7, 0.8, 0.8, 0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.8, 0.9, 0.9, 1.0, 0.9, 0.9, 0.8, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.9, 1.0, 1.0, 1.1, 1.0, 1.0, 0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.1, 1.2, 1.1, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.2, 1.3, 1.2, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],
    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],
    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],
    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],
    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.2, 1.3, 1.2, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.1, 1.2, 1.1, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.9, 1.0, 1.0, 1.1, 1.0, 1.0, 0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.8, 0.9, 0.9, 1.0, 0.9, 0.9, 0.8, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.7, 0.7, 0.8, 0.8, 0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6, 0.5, 0.4, 0.3, 0.2],
    [0.1, 0.2, 0.3, 0.4, 0.5, 0.5, 0.6, 0.6, 0.7, 0.7, 0.8, 0.7, 0.7, 0.6, 0.6, 0.5, 0.5, 0.4, 0.3, 0.2, 0.1],
    [0.1, 0.2, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.6, 0.7, 0.6, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2, 0.1],
    [0.1, 0.1, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.5, 0.6, 0.5, 0.5, 0.4, 0.4, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1],
    [0.1, 0.1, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.4, 0.4, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1]
].map(row => row.map(x => x / 55.2)); // 修正归一化系数

// 高级纹理增强 (23x23)
export const textureEnhancementPro = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1],
    [-1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, -1, -1],
    [-1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1],
    [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
];
